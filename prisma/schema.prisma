generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  nom       String
  prenom    String
  password  String
  role      String   @default("USER")
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  refreshTokens RefreshToken[]
  estimates     Estimate[]
  bookings      Booking[]

  @@map("users")
}

model RefreshToken {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  expiresAt DateTime
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("refresh_tokens")
}

model VehicleType {
  id          String   @id @default(cuid())
  name        String   @unique
  displayName String
  description String
  basePrice   Decimal  @db.Decimal(10, 2)
  perMinute   Decimal  @db.Decimal(10, 2)
  perKm       Decimal  @db.Decimal(10, 2)
  maxWeight   Int
  dimensions  String
  imageUrl    String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  estimates Estimate[]

  @@map("vehicle_types")
}

model Estimate {
  id                     String         @id @default(cuid())
  pickupAddress          String
  pickupCoordinates      String
  destinationAddress     String
  destinationCoordinates String
  vehicleType            String
  vehicle                VehicleType    @relation(fields: [vehicleType], references: [id])
  distance               Int
  estimatedDuration      Int
  basePrice              Decimal        @db.Decimal(10, 2)
  laborCost              Decimal        @db.Decimal(10, 2)
  mileageCost            Decimal        @db.Decimal(10, 2)
  bookingFee             Decimal        @db.Decimal(10, 2)
  totalPrice             Decimal        @db.Decimal(10, 2)
  status                 EstimateStatus @default(CALCULATED)
  userAgent              String?
  ipAddress              String?
  userId                 String?
  user                   User?          @relation(fields: [userId], references: [id])
  bookingId              String?        @unique
  booking                Booking?       @relation(fields: [bookingId], references: [id])
  createdAt              DateTime       @default(now())
  updatedAt              DateTime       @updatedAt

  @@map("estimates")
}

enum EstimateStatus {
  CALCULATED
  SAVED
  BOOKED
  EXPIRED
}

model PricingRule {
  id         String    @id @default(cuid())
  name       String
  type       String
  conditions Json
  adjustment Decimal   @db.Decimal(10, 2)
  isActive   Boolean   @default(true)
  validFrom  DateTime
  validTo    DateTime?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  @@map("pricing_rules")
}

model Booking {
  id            String        @id @default(cuid())
  estimateId    String?       @unique
  estimate      Estimate?
  userId        String?
  user          User?         @relation(fields: [userId], references: [id])
  customerName  String
  customerEmail String
  customerPhone String
  scheduledAt   DateTime
  status        BookingStatus @default(PENDING)
  paymentStatus PaymentStatus @default(PENDING)
  paymentId     String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  @@map("bookings")
}

enum BookingStatus {
  PENDING
  CONFIRMED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  AUTHORIZED
  CAPTURED
  FAILED
  REFUNDED
}
