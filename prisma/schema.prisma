generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/**
 * ============================================================
 * EXISTING MODELS (unchanged unless noted) + NEW MODELS
 * Notes:
 * - NEW: ItemType, EstimateItem
 * - CHANGED: UploadedFile (+estimateItemId), Estimate (+volumeM3, laborMin, movers, breakdown, items[])
 * ============================================================
 */

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  nom       String
  prenom    String
  password  String
  role      UserRole @default(CLIENT)
  isActive  Boolean  @default(true) @map("is_active")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations existantes
  refreshTokens RefreshToken[]
  estimates     Estimate[]
  bookings      Booking[]
  uploadedFiles UploadedFile[] @relation("UserFiles")

  // ðŸ†• Nouvelles relations pour la plateforme multi-fournisseurs
  providerProfile Provider?
  ownedVehicles   Vehicle[]
  driverProfile   Driver?
  notifications   Notification[]

  @@map("users")
}

enum UserRole {
  CLIENT
  PROVIDER
  DRIVER
  ADMIN

  @@map("UserRole")
}

model RefreshToken {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String   @map("user_id")
  expiresAt DateTime @map("expires_at")
  createdAt DateTime @default(now()) @map("created_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("refresh_tokens")
}

model VehicleType {
  id          String   @id @default(cuid())
  name        String   @unique
  displayName String   @map("display_name")
  description String
  basePrice   Decimal  @map("base_price") @db.Decimal(10, 2)
  perMinute   Decimal  @map("per_minute") @db.Decimal(10, 2)
  perKm       Decimal  @map("per_km") @db.Decimal(10, 2)
  maxWeight   Int      @map("max_weight")
  dimensions  String
  imageUrl    String?  @map("image_url")
  isActive    Boolean  @default(true) @map("is_active")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  estimates Estimate[]
  vehicles  Vehicle[]

  @@map("vehicle_types")
}

model Estimate {
  id                     String      @id @default(cuid())
  pickupAddress          String      @map("pickup_address")
  pickupCoordinates      String      @map("pickup_coordinates")
  destinationAddress     String      @map("destination_address")
  destinationCoordinates String      @map("destination_coordinates")
  vehicleType            String      @map("vehicle_type")
  vehicle                VehicleType @relation(fields: [vehicleType], references: [id])

  // ðŸ†• Informations sur le fournisseur assignÃ©
  assignedProviderId String?   @map("assigned_provider_id")
  assignedProvider   Provider? @relation(fields: [assignedProviderId], references: [id])
  assignedVehicleId  String?   @map("assigned_vehicle_id")
  assignedVehicle    Vehicle?  @relation(fields: [assignedVehicleId], references: [id])

  distance          Int
  estimatedDuration Int     @map("estimated_duration")
  basePrice         Decimal @map("base_price") @db.Decimal(10, 2)
  laborCost         Decimal @map("labor_cost") @db.Decimal(10, 2)
  mileageCost       Decimal @map("mileage_cost") @db.Decimal(10, 2)
  bookingFee        Decimal @map("booking_fee") @db.Decimal(10, 2)
  totalPrice        Decimal @map("total_price") @db.Decimal(10, 2)

  // ðŸ†• DÃ©tails de pricing avec fournisseur
  providerEarning Decimal? @map("provider_earning") @db.Decimal(10, 2)
  platformFee     Decimal? @map("platform_fee") @db.Decimal(10, 2)

  status        EstimateStatus @default(CALCULATED)
  userAgent     String?        @map("user_agent")
  ipAddress     String?        @map("ip_address")
  userId        String?        @map("user_id")
  user          User?          @relation(fields: [userId], references: [id])
  bookingId     String?        @unique @map("booking_id")
  booking       Booking?       @relation(fields: [bookingId], references: [id])
  createdAt     DateTime       @default(now()) @map("created_at")
  updatedAt     DateTime       @updatedAt @map("updated_at")
  uploadedFiles UploadedFile[] @relation("EstimateFiles")

  // ðŸ†• Traces de calcul (ajouts)
  volumeM3  Decimal? @map("volume_m3") @db.Decimal(7, 2)
  laborMin  Decimal? @map("labor_min") @db.Decimal(7, 2)
  movers    Int?     @map("movers")
  breakdown Json?    @map("breakdown")

  // ðŸ†• Items (relation inverse)
  items EstimateItem[]

  @@map("estimates")
}

enum EstimateStatus {
  CALCULATED
  SAVED
  BOOKED
  EXPIRED

  @@map("EstimateStatus")
}

model PricingRule {
  id         String    @id @default(cuid())
  name       String
  type       String
  conditions Json
  adjustment Decimal   @db.Decimal(10, 2)
  isActive   Boolean   @default(true) @map("is_active")
  validFrom  DateTime  @map("valid_from")
  validTo    DateTime? @map("valid_to")

  // ðŸ†• RÃ¨gles spÃ©cifiques aux fournisseurs
  providerId String?   @map("provider_id")
  provider   Provider? @relation(fields: [providerId], references: [id])

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("pricing_rules")
}

model Booking {
  id         String    @id @default(cuid())
  estimateId String?   @unique @map("estimate_id")
  estimate   Estimate?
  userId     String?   @map("user_id")
  user       User?     @relation(fields: [userId], references: [id])

  // ðŸ†• Informations sur le fournisseur et vÃ©hicule assignÃ©s
  providerId String?   @map("provider_id")
  provider   Provider? @relation(fields: [providerId], references: [id])
  vehicleId  String?   @map("vehicle_id")
  vehicle    Vehicle?  @relation(fields: [vehicleId], references: [id])
  driverId   String?   @map("driver_id")
  driver     Driver?   @relation(fields: [driverId], references: [id])

  customerName  String        @map("customer_name")
  customerEmail String        @map("customer_email")
  customerPhone String        @map("customer_phone")
  scheduledAt   DateTime      @map("scheduled_at")
  status        BookingStatus @default(PENDING)
  paymentStatus PaymentStatus @default(PENDING) @map("payment_status")
  paymentId     String?       @map("payment_id")

  // ðŸ†• Tracking et Ã©valuation
  startedAt      DateTime? @map("started_at")
  completedAt    DateTime? @map("completed_at")
  customerRating Int?      @map("customer_rating")
  customerReview String?   @map("customer_review")
  providerRating Int?      @map("provider_rating")

  createdAt     DateTime       @default(now()) @map("created_at")
  updatedAt     DateTime       @updatedAt @map("updated_at")
  uploadedFiles UploadedFile[] @relation("BookingFiles")
  earning       Earning?

  @@map("bookings")
}

enum BookingStatus {
  PENDING
  CONFIRMED
  IN_PROGRESS
  COMPLETED
  CANCELLED

  @@map("BookingStatus")
}

enum PaymentStatus {
  PENDING
  AUTHORIZED
  CAPTURED
  FAILED
  REFUNDED

  @@map("PaymentStatus")
}

/**
 * ---------------- NEW: ItemType & EstimateItem ----------------
 */

model ItemType {
  id               String   @id @default(cuid())
  category         String
  type             String
  label            String
  defaultVolumeM3  Decimal  @db.Decimal(6, 3)
  defaultWeightKg  Decimal? @db.Decimal(6, 2)
  isFragileDefault Boolean  @default(false)
  isBulkyDefault   Boolean  @default(false)
  isActive         Boolean  @default(true)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  estimateItems EstimateItem[]

  @@unique([category, type], name: "category_type")
  @@map("item_types")
}

model EstimateItem {
  id         String   @id @default(cuid())
  estimateId String   @map("estimate_id")
  estimate   Estimate @relation(fields: [estimateId], references: [id], onDelete: Cascade)

  itemTypeId String?   @map("item_type_id")
  itemType   ItemType? @relation(fields: [itemTypeId], references: [id])

  category String
  type     String
  qty      Int

  Lcm      Decimal? @db.Decimal(7, 2)
  lcm      Decimal? @db.Decimal(7, 2)
  Hcm      Decimal? @db.Decimal(7, 2)
  weightKg Decimal? @db.Decimal(7, 2)

  fragile Boolean @default(false)
  bulky   Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  uploadedFiles UploadedFile[]

  @@map("estimate_items")
}

/**
 * --------------------------------------------------------------
 */

model UploadedFile {
  id            String  @id @default(cuid())
  filename      String  @unique
  originalName  String  @map("original_name")
  mimetype      String
  size          Int
  path          String
  thumbnailPath String? @map("thumbnail_path")
  category      String  @default("item_photo")
  description   String?
  bookingId     String? @map("booking_id")
  estimateId    String? @map("estimate_id")
  userId        String? @map("user_id")

  // NEW: link photo -> specific EstimateItem (optional)
  estimateItemId String?       @map("estimate_item_id")
  estimateItem   EstimateItem? @relation(fields: [estimateItemId], references: [id])

  booking  Booking?  @relation("BookingFiles", fields: [bookingId], references: [id], onDelete: Cascade)
  estimate Estimate? @relation("EstimateFiles", fields: [estimateId], references: [id], onDelete: Cascade)
  user     User?     @relation("UserFiles", fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("uploaded_files")
}

// =====================================
// NOUVEAUX MODÃˆLES POUR MULTI-FOURNISSEURS
// =====================================

model Provider {
  id     String @id @default(cuid())
  userId String @unique @map("user_id")
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Informations business
  companyName     String?      @map("company_name")
  businessType    BusinessType @default(INDIVIDUAL) @map("business_type")
  licenseNumber   String?      @map("license_number")
  insuranceNumber String?      @map("insurance_number")
  taxNumber       String?      @map("tax_number")

  // Localisation et zone de service
  baseAddress     String   @map("base_address")
  baseCoordinates String   @map("base_coordinates")
  serviceRadius   Int      @default(50) @map("service_radius")
  serviceAreas    String[] @map("service_areas")

  // Statut et Ã©valuation
  isVerified    Boolean  @default(false) @map("is_verified")
  isActive      Boolean  @default(true) @map("is_active")
  rating        Decimal? @db.Decimal(3, 2)
  totalJobs     Int      @default(0) @map("total_jobs")
  totalEarnings Decimal  @default(0) @map("total_earnings") @db.Decimal(12, 2)

  // ParamÃ¨tres financiers
  commissionRate Decimal @default(15) @map("commission_rate") @db.Decimal(5, 2)

  // Statistiques de performance
  avgResponseTime  Int      @default(0) @map("avg_response_time")
  cancellationRate Decimal  @default(0) @map("cancellation_rate") @db.Decimal(3, 2)
  punctualityRate  Decimal  @default(99.99) @map("punctuality_rate") @db.Decimal(5, 2)
  createdAt        DateTime @default(now()) @map("created_at")
  updatedAt        DateTime @updatedAt @map("updated_at")

  // Relations
  vehicles       Vehicle[]
  drivers        Driver[]
  availabilities ProviderAvailability[]
  bookings       Booking[]
  earnings       Earning[]
  estimates      Estimate[]
  pricingRules   PricingRule[]

  @@map("providers")
}

enum BusinessType {
  INDIVIDUAL
  SMALL_BUSINESS
  COMPANY

  @@map("BusinessType")
}

model Vehicle {
  id         String   @id @default(cuid())
  providerId String   @map("provider_id")
  provider   Provider @relation(fields: [providerId], references: [id], onDelete: Cascade)
  ownerId    String   @map("owner_id")
  owner      User     @relation(fields: [ownerId], references: [id])

  // Type et informations vÃ©hicule
  vehicleTypeId String      @map("vehicle_type_id")
  vehicleType   VehicleType @relation(fields: [vehicleTypeId], references: [id])

  // DÃ©tails spÃ©cifiques
  brand        String
  model        String
  year         Int
  licensePlate String  @unique @map("license_plate")
  color        String
  vin          String?

  // CapacitÃ©s rÃ©elles (peut diffÃ©rer du type standard)
  actualMaxWeight  Int?    @map("actual_max_weight")
  actualDimensions String? @map("actual_dimensions")
  fuelType         String? @map("fuel_type")

  // Images et documents
  photos          String[]
  insuranceDoc    String?  @map("insurance_doc")
  registrationDoc String?  @map("registration_doc")
  inspectionDoc   String?  @map("inspection_doc")

  // Statut et maintenance
  isActive          Boolean   @default(true) @map("is_active")
  isAvailable       Boolean   @default(true) @map("is_available")
  lastMaintenanceAt DateTime? @map("last_maintenance_at")
  nextMaintenanceAt DateTime? @map("next_maintenance_at")
  mileage           Int?

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  bookings              Booking[]
  availabilities        VehicleAvailability[]
  estimates             Estimate[]
  temporaryReservations TemporaryReservation[]

  @@map("vehicles")
}

model Driver {
  id         String   @id @default(cuid())
  userId     String   @unique @map("user_id")
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  providerId String   @map("provider_id")
  provider   Provider @relation(fields: [providerId], references: [id], onDelete: Cascade)

  // Documents et qualifications
  licenseNumber   String   @map("license_number")
  licenseExpiry   DateTime @map("license_expiry")
  licenseClass    String?  @map("license_class")
  experienceYears Int      @map("experience_years")
  languages       String[]

  // Statut et localisation
  isActive        Boolean   @default(true) @map("is_active")
  isAvailable     Boolean   @default(true) @map("is_available")
  currentLocation String?   @map("current_location")
  lastSeen        DateTime? @map("last_seen")

  // Ã‰valuation
  rating     Decimal? @db.Decimal(3, 2)
  totalTrips Int      @default(0) @map("total_trips")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  bookings Booking[]

  @@map("drivers")
}

model ProviderAvailability {
  id         String   @id @default(cuid())
  providerId String   @map("provider_id")
  provider   Provider @relation(fields: [providerId], references: [id], onDelete: Cascade)

  // Planning rÃ©current
  dayOfWeek Int?    @map("day_of_week")
  startTime String? @map("start_time")
  endTime   String? @map("end_time")

  // Ou date/heure spÃ©cifique
  specificDate  DateTime? @map("specific_date")
  startDateTime DateTime? @map("start_date_time")
  endDateTime   DateTime? @map("end_date_time")

  type        AvailabilityType @default(AVAILABLE)
  reason      String?
  isRecurring Boolean          @default(true) @map("is_recurring")

  isActive  Boolean  @default(true) @map("is_active")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("provider_availabilities")
}

model VehicleAvailability {
  id        String  @id @default(cuid())
  vehicleId String  @map("vehicle_id")
  vehicle   Vehicle @relation(fields: [vehicleId], references: [id], onDelete: Cascade)

  // CrÃ©neau
  startTime DateTime @map("start_time")
  endTime   DateTime @map("end_time")

  // Type de disponibilitÃ©
  type      AvailabilityType @default(AVAILABLE)
  reason    String?
  bookingId String?          @map("booking_id")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("vehicle_availabilities")
}

enum AvailabilityType {
  AVAILABLE
  BOOKED
  MAINTENANCE
  UNAVAILABLE

  @@map("AvailabilityType")
}

model Earning {
  id         String   @id @default(cuid())
  providerId String   @map("provider_id")
  provider   Provider @relation(fields: [providerId], references: [id])
  bookingId  String   @unique @map("booking_id")
  booking    Booking  @relation(fields: [bookingId], references: [id])

  // Calculs financiers
  totalAmount     Decimal  @map("total_amount") @db.Decimal(10, 2)
  platformFee     Decimal  @map("platform_fee") @db.Decimal(10, 2)
  providerEarning Decimal  @map("provider_earning") @db.Decimal(10, 2)
  taxes           Decimal? @db.Decimal(10, 2)

  // DÃ©tails de paiement
  payoutStatus    PayoutStatus @default(PENDING) @map("payout_status")
  payoutMethod    String?      @map("payout_method")
  payoutReference String?      @map("payout_reference")
  payoutDate      DateTime?    @map("payout_date")

  // PÃ©riode comptable
  periodStart DateTime @map("period_start")
  periodEnd   DateTime @map("period_end")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("earnings")
}

enum PayoutStatus {
  PENDING
  PROCESSING
  PAID
  FAILED
  CANCELLED

  @@map("PayoutStatus")
}

model TemporaryReservation {
  id          String   @id @default(cuid())
  vehicleId   String   @map("vehicle_id")
  vehicle     Vehicle  @relation(fields: [vehicleId], references: [id], onDelete: Cascade)
  scheduledAt DateTime @map("scheduled_at")
  estimateId  String?  @map("estimate_id")
  sessionId   String   @map("session_id")
  expiresAt   DateTime @map("expires_at")

  createdAt DateTime @default(now()) @map("created_at")

  @@map("temporary_reservations")
}

model ServiceArea {
  id          String  @id @default(cuid())
  name        String  @unique
  boundaries  Json
  isActive    Boolean @default(true) @map("is_active")
  surgeActive Boolean @default(false) @map("surge_active")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("service_areas")
}

model Notification {
  id     String @id @default(cuid())
  userId String @map("user_id")
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  type    NotificationType
  title   String
  message String
  data    Json?

  isRead Boolean   @default(false) @map("is_read")
  readAt DateTime? @map("read_at")

  createdAt DateTime @default(now()) @map("created_at")

  @@map("notifications")
}

enum NotificationType {
  BOOKING_REQUEST
  BOOKING_CONFIRMED
  BOOKING_CANCELLED
  PAYMENT_RECEIVED
  RATING_RECEIVED
  SYSTEM_UPDATE
  MAINTENANCE_REMINDER

  @@map("NotificationType")
}
